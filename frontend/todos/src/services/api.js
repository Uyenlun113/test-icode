import axios from "axios";

// C·∫•u h√¨nh base URL
const API_BASE_URL = "http://localhost:3000/api";

// T·∫°o axios instance
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// Request interceptor
api.interceptors.request.use(
  (config) => {
    console.log(`üîÑ API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error("‚ùå Request Error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error("‚ùå Response Error:", error.response?.data || error.message);
    return Promise.reject(error);
  }
);

// Todo API methods
export const todoAPI = {
  // L·∫•y t·∫•t c·∫£ todos
  async getAll(filter = "all") {
    try {
      const response = await api.get("/todos", {
        params: { filter },
      });
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  // L·∫•y todo theo ID
  async getById(id) {
    try {
      const response = await api.get(`/todos/${id}`);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  // T·∫°o todo m·ªõi
  async create(todoData) {
    try {
      const response = await api.post("/todos", todoData);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  // C·∫≠p nh·∫≠t todo
  async update(id, todoData) {
    try {
      const response = await api.put(`/todos/${id}`, todoData);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  // ƒê√°nh d·∫•u ho√†n th√†nh/ch∆∞a ho√†n th√†nh
  async toggleComplete(id) {
    try {
      const response = await api.patch(`/todos/${id}/toggle`);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  // X√≥a todo
  async delete(id) {
    try {
      const response = await api.delete(`/todos/${id}`);
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  // L·∫•y th·ªëng k√™
  async getStats() {
    try {
      const response = await api.get("/todos/stats");
      return response.data;
    } catch (error) {
      throw this.handleError(error);
    }
  },

  // X·ª≠ l√Ω l·ªói
  handleError(error) {
    if (error.response) {
      // Server tr·∫£ v·ªÅ l·ªói
      return {
        message: error.response.data.message || "C√≥ l·ªói x·∫£y ra",
        status: error.response.status,
        errors: error.response.data.errors || [],
      };
    } else if (error.request) {
      // Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c server
      return {
        message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.",
        status: 0,
      };
    } else {
      // L·ªói kh√°c
      return {
        message: error.message || "C√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra",
        status: -1,
      };
    }
  },
};
